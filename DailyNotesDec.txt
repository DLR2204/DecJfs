

on-1  off-0   ----------------> ASCII/UNICODE  a-97


programming lang :-  java

sunmicro ---------------------------------->oracle 
greenteam (.gt)--------->oak--------------->java(.java)

jdk 1.0 ----------------------------------- > 23


	3  editions
	
	jse/j2se :- core java [standalone(no client-server)]
	
	jee/j2ee :-core java + adv java [distributed(client-server)]
	
	jme/j2me :-micro details java [mobile app]
	
	
	
	53 reserved words.
	
	
	variables :- 
	
		syntax :- 	datatype variableName ;			//declaration of a variable
		
					datatype variableName = value;   //intialization of a variable
				
		
			local variable(within the method)		global Variable(outside the method)
			
												static 				instance 
												
												
syntax:- 
=======
static   ->  static datatype variableName = value;

instance ->		datatype variableName = value;

memory allocation:- 
=================

static   ->Static prop's will gets the memory space only once when the class loading into the jvm

instance ->Instance prop's will gets the memory space for every object creation


				object creation syntax:- 
				
				
				ClassName objname = new ClassName();

access:- 
==========

static   ->Static prop's can be accessed by the class reference.

instance ->Instance prop's can be accessed by the object reference.

In the memory:-
============= 

static   ->Method Area

instance ->Heap Area


Usage:-
=======

static   ->Common Data  

instance ->Unique Data



operators :-  ULTRA AB
---------

	(operand)		a  +    b 


	Uninary

	Logical
	
	Terinary
	
	Relational
	
	Assignment
	
	Arithmetic 
	
	Bitwise
			
			
			
			methods:- set of statements where altogether performs the similar task.
			
			
			syntax:- 
			
					accessmodifier  returntype methodName(prms...){
					
					/body
					}
					
					
			(1)static  :- 
			
					accessmodifier static returntype methodName(prms...){
					
					/body
					}
			
			
			(2)dynamic
			
				accessmodifier  returntype methodName(prms...){
					
					/body
					}
					
	
	class = variables + methods [class members + member functions]
	
	object :- ClassName obj ;
	
			ClassName obj = new ClassName();
			
			
			
	Inheritance :- Accquiring  the parent class properties to the child class.
			
			*Code Reuseability
	
	extends						implements
	
	cls -->cls					interface -->cls
	
	
	* M.I is not supported in java @class level
	
	* M.Iis supported in java @interface level
	
	
	class A{						class B{
	
	add(a,b){						add(x,y){
	(a+b);							x*y;	
	
	}								}
	
	}								}
	
	
	class C extends A,B {
	
	add(4,2);   ----------->
	}
	
	
	
		types of method based on the method :- 2 types 
		
		
		(1)concrete methods:- methods with method body
		
syntax:- 		accessmodifier  returntype methodName(prms...){
					
					/body
					}
					
		
		(2)abstract methods:- methods without method body
		
		
syntax:- 		accessmodifier  returntype methodName(prms...);
					
					
					
					
class :- the collection of only concrete methods.

interface :- the collection of only abstract methods.

abstract clss :- the combination of both abstract + concrete methods.




Abstraction :- Hiding the data
------------			
					*SECURITY

class    0%

abstract class 0%-100%

interface 100%


Polymorphism :-   * code reuseability
------------

(1)MethodOverloading :- Method name is same but parameters are diff:- 
						
							(a)no:-of parameters
							(b)type of parameters
							(c)order of parameters

(2)MethodOverriding :- Method name is same but the implementation is diff


class Parent{

1000Cr()

marriage(){
kajol;
}

........


}

class Child extends Parent{

1000Cr()

@Override
marriage(){

}

........




}


Encapsulation :- wrapping up of the entire data into a single unit.
--------------


Constructor:- It is to initialize the objects
----------- 	

	(1)default constructor
	
	syntax:- accessmodifier className(){
	
			//body
	
			}
	
	
	(2)parametrized constructor
	
		syntax:- accessmodifier className(parmss...){
	
			//body
	
			}
			
			
			className obj = new className();
			
			
	"java.lang.Object " is parent class for every java file
	
	"java.lang"  is the default package 
	
	
	
	Array:- It's a collection of homogeneous elements.
	
	
	(1)int arr[] = {1,2,3,4,5,6,6,7,8,7};
	
	(2)int arr[] = new int[23];
	
	(3)int arr[] = new int[]{1,2,3,4,5,6,6,7,8,89};
	
	
	
	limitations :- 
	-------------
	
	(1)It will accept only homogeneous data
	
	(2)no utility methods
	
	(3)It is fixed in size
	
	
	collections:- framework  ----------->util
	------------
	
	
	(1)It will accept both homogeneous,heterogeneous data
	
	(2)Lots of utility methods
	
	(3)It is growable in nature
	
	
	FileHandling:-  java.io
	-------------
	
	
	(1)Creating the file 	  :- File
	
	(2)To write into the file :- FileWriter
								 BufferedWriter
								 PrintWriter
								 
								 
	(3)To Read from the file  :- FileReader
								 BufferedReader
								 
								 
								 
		junit:- Unit testing in java
		------
		
		
		String:- 
		---------
		
		
		String 					StringBuffer 				StringBuilder
		
		immutable				Mutable						mutable
		
								synchorised					non-synchorised
								
								
		MutliThreading:-Running multiple processes at a time 
		
							
							
									DataBase:-
									---------
									
		apple	452	
		orange	343
		grapes	232		
		pear	345
		banana	234		
										
		

			RDBMS :- Tables = rows(records) +colums(fields)
			
			
			Queries :- command   - 5 types :- 
			
			
			(1)DDL(Data definition Language) :- create,alter,rename,truncate,drop  [auto-committed]
			
			(2)DML(Data Manipulation Language) :- insert,update,delete [not auto-committed]
			
			(3)DRL(Data Retrival Language) :- select
			
			(4)DCL(Data Control Language) :- grant,revoke
			
			(5)TCL(Transaction Control Language) :- commit,rollback
			
												
			
			
	steps to create schema in db:-
	
		(1)conn /as sysdba;
		
		(2)create user username identified by password;
		
		(3)grant connect, resource to username;
		
		(4)conn username/password
		
		
		
		drop :- to delete the entire table with records
		
		truncate :- to delete the records in the table
		
		delete  :- to delete any specific row
		
											JDBC:-
											=====
											
		(1)Loading Driver Classes

		(2)Create the connection
		
		(3)Create the statements
		
		(4)Execute the statements
		
		(5)Close the connections.
											
											
											
		Limitations:- 
		============
		
		(1)Queires
		
		(2)Table creation 
		
		(3)Exception Handling
		
		(4)BoilerPlate code (Repeated code)
		
		(5)same files for db prop's , logic
		
		
		jpa:-(specfication)[java persistence api]
		====
		
		
		(1)No Queires
		
		(2)Table will be automatically created
		
		(3)No Exception Handling
		
		(4)No BoilerPlate code
		
		(5)Diff files for db prop's , logic
		
		
		ORM Tools [Implementations]:- 
		-----------------------------
		
		hibernate , ecllipse link,top link ,ibatis.......
		
		
		(1)Entity Manager -Query equivalent methods
		
		(2) Class  --------> Table
			
			variables----->columns
			
			objects ------>rows
			
			
		(3)db prop's --->xml

			logic ------>java
			
			
		c-create  --insert ----------->persit()
		
		r-retrive --select ----------->find()
		
		u-update  --update ------------>merge()
		
		d-delete  --delete ------------->remove()
		
		
		
	Maven:-Build Tool
			
			
			
								Spring:- 
								======
								
								
		Spring:- It is a non-invasive framework which is used to develop light-weighted
						and loosely -coupled web application's.
		
		
		
				invasive :-It will forces the programmer to use predefined api
				
				non-invasive :- It will not forces the programmer to use predefined api
		
			
				heavy-weighted:- 
				
	class A{
	
	1000 methods
	
	}

		class B extends A{
		
			10 methods
		}
					class C extends B{
					
					1 method    ------->1011 methods
					
					}
					
					
			tightly coupled :- If the dependencies b/n the classes are very high.
			
			loosely coupled :- If the dependencies b/n the classes are very low.
			
			

	Spring Core ,Spring Boot,Spring DataJpa,Sprig REST, Spring SECURITY,Spring Web,Spring Cloud...........
	
	
	
										Spring Core :- 
										===========
										
	It will avoid the dependencies b/n classes.So that our app will be a loosely-coupled app
	
	
	
	Containers:-They will creates the object
	
				(1)BeanFactory 
				
				(2)ApplicationContext
				
				
	Dependency Injection :- Injecting the data into the objects
	
				(1)Setter Injection  <property></property>
				
				(2)Constructor Injection  <constructor-arg></constructor-arg>
				
				(3)Autowiring  autowire
				
				
	Configuration:- 
	
				(1)XML configuration
				
				(2)Annotation configuration
				
				
				
				SpringBoot:- 
				===========
					
					
					(1)EmbeddedServer  :- Tomcat[apache]
					
					(2)AutoConfiguration
					
					(3)Staters:- set of jar files
					
					(4)Actuators :- health /status of our app through end point urls.
				
				
				
				Controller :- it will interact with the ui through http url's.
				
				dao/repo :- it will interact with the database throught jpa hibernate.
				
				service :- it is the mediator between controller n the rep layer.
				
				
				
		SpringRest :- It is to invoke the restfull webservices to the project.
		==========
		
		Webservices:-It is used to make interaction possible between two interoperable app'ns.
		-----------
				
				(1)SOAP :-It's common lang is only xml
				
				(2)REST :- It's common lang is xml,json,html,php,txt........
				
				
				
								Frontend:-
								=========
								
		HTML:- Hyper Text Markup Language
		
		
		.htm/.html
		
		
		<tag>
		
		(1)container/pair :- <tag></tag>
		
		(2)single/empty :-<tag> or </tag> or <tag/> 
		
		
		
		<opening tag class="values"> Statement </closing>   ====>element
		
		
		
		website :- collection of webpages
		
		
						(1)static webpages :- the changes will not happens regularly
						
						(2)dynamic webpages :- the changes will happens regularly.
						
						(3)server webpages :- the data from the static and dynamic webpages will be stored 
						
						
			table = rows+columns
			
			
			row <tr></tr>
			
			col  <td></td>
			